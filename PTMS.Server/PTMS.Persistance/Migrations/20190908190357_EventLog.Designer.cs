// <auto-generated />
using System;
using EntityFrameworkCore.FirebirdSql.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PTMS.Persistance;

namespace PTMS.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190908190357_EventLog")]
    partial class EventLog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Fb:ValueGenerationStrategy", FbValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserToken");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<int>("EmailConfirmed");

                    b.Property<int>("Enabled");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15);

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.Property<int>("LockoutEnabled");

                    b.Property<string>("LockoutEnd")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 48)));

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PhoneNumberConfirmed");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("RouteIds")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ProjectId");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.ArmUsers", b =>
                {
                    b.Property<int>("AuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AU_ID_");

                    b.Property<string>("AuAccess")
                        .HasColumnName("AU_ACCESS")
                        .HasMaxLength(20);

                    b.Property<string>("AuDiscription")
                        .HasColumnName("AU_DISCRIPTION")
                        .HasMaxLength(50);

                    b.Property<string>("AuLogin")
                        .IsRequired()
                        .HasColumnName("AU_LOGIN")
                        .HasMaxLength(100);

                    b.HasKey("AuId")
                        .HasName("IDX_PK_ARM_USERS_ID_");

                    b.HasIndex("AuId")
                        .HasName("IDX_PK_ARM_USERS_ID_");

                    b.HasIndex("AuLogin")
                        .HasName("UNQ1_ARM_USERS");

                    b.ToTable("ARM_USERS                      ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.BlockType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BT_ID_");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("BT_NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Тип блока");

                    b.HasKey("Id")
                        .HasName("PK_BLOCK_TYPES_1");

                    b.HasIndex("Id")
                        .HasName("PK_BLOCK_TYPES_1");

                    b.HasIndex("Name")
                        .HasName("UNQ1_BLOCK_TYPES");

                    b.ToTable("BLOCK_TYPES                    ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.BusStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int?>("Azmth")
                        .HasColumnName("AZMTH");

                    b.Property<double?>("Lat")
                        .HasColumnName("LAT");

                    b.Property<double?>("Lon")
                        .HasColumnName("LON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(110);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_BS_1");

                    b.ToTable("BS                             ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.BusStationRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int?>("BusStationId")
                        .HasColumnName("BS_ID");

                    b.Property<int?>("Num")
                        .HasColumnName("NUM");

                    b.Property<int?>("RouteId")
                        .HasColumnName("ROUTE_ID");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_BS_ROUTE_1");

                    b.HasIndex("RouteId");

                    b.HasIndex("Num", "RouteId")
                        .IsUnique()
                        .HasName("BS_ROUTE_IDX");

                    b.ToTable("BS_ROUTE                       ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.CarBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CB_ID_");

                    b.Property<int?>("CarTypeId")
                        .HasColumnName("CAR_TYPE_ID_")
                        .HasAnnotation("Description", "Тип автобуса");

                    b.Property<string>("H")
                        .HasMaxLength(10);

                    b.Property<string>("L")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("CB_NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Марка автобуса");

                    b.Property<string>("W")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("PK_CAR_BRAND");

                    b.HasIndex("CarTypeId")
                        .IsUnique()
                        .HasName("FK_CAR_BRAND_CAR_TYPE");

                    b.HasIndex("Id")
                        .HasName("PK_CAR_BRAND");

                    b.HasIndex("Name")
                        .HasName("UNQ1_CAR_BRAND");

                    b.ToTable("CAR_BRAND                      ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CT_ID_");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Тип автобуса");

                    b.Property<string>("ShortName")
                        .HasColumnName("SHORT_NAME_")
                        .HasMaxLength(20)
                        .HasAnnotation("Description", "Сокращенное название типа автобуса");

                    b.HasKey("Id")
                        .HasName("PK_CAR_TYPE_");

                    b.HasIndex("Id")
                        .HasName("PK_CAR_TYPE_");

                    b.HasIndex("Name")
                        .HasName("UNQ1_CAR_TYPE_");

                    b.ToTable("CAR_TYPE_                      ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Changed", b =>
                {
                    b.Property<int>("ChgIds")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CHG_IDS");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("FIELD_NAME_")
                        .HasMaxLength(100)
                        .HasAnnotation("Description", "Поле");

                    b.Property<int>("Ids")
                        .HasColumnName("IDS_");

                    b.Property<string>("NewFieldValue")
                        .IsRequired()
                        .HasColumnName("NEW_FIELD_VALUE_")
                        .HasMaxLength(255)
                        .HasAnnotation("Description", "Новое значение поля");

                    b.Property<string>("OldFieldValue")
                        .IsRequired()
                        .HasColumnName("OLD_FIELD_VALUE_")
                        .HasMaxLength(255)
                        .HasAnnotation("Description", "Старое значение поля");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnName("TABLE_NAME_")
                        .HasMaxLength(100)
                        .HasAnnotation("Description", "Таблица");

                    b.Property<DateTime>("Time")
                        .HasColumnName("TIME_")
                        .HasAnnotation("Description", "Время изменения");

                    b.Property<int>("TypeChaged")
                        .HasColumnName("TYPE_CHAGED_")
                        .HasAnnotation("Description", "Тип изменения");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnName("USER_")
                        .HasMaxLength(100)
                        .HasAnnotation("Description", "Пользователь");

                    b.HasKey("ChgIds")
                        .HasName("PK_CHANGED_");

                    b.HasIndex("ChgIds")
                        .HasName("PK_CHANGED_");

                    b.ToTable("CHANGED_                       ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Days", b =>
                {
                    b.Property<int>("DId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("D_ID_");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnName("DAY_NAME_")
                        .HasMaxLength(20)
                        .HasAnnotation("Description", "День недели");

                    b.Property<string>("DayShortName")
                        .IsRequired()
                        .HasColumnName("DAY_SHORT_NAME_")
                        .HasMaxLength(5)
                        .HasAnnotation("Description", "Сокращенное название дня недели");

                    b.Property<short>("DayType")
                        .HasColumnName("DAY_TYPE_")
                        .HasAnnotation("Description", "Признак выходного дня");

                    b.HasKey("DId")
                        .HasName("PK_DAYS__1");

                    b.HasIndex("DId")
                        .HasName("PK_DAYS__1");

                    b.ToTable("DAYS_                          ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.DefaultPlans", b =>
                {
                    b.Property<int>("Ids")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDS_");

                    b.Property<int?>("Pid")
                        .HasColumnName("PID_")
                        .HasAnnotation("Description", "Перевозчик");

                    b.Property<int?>("PlannedCount")
                        .HasColumnName("PLANNED_COUNT_")
                        .HasAnnotation("Description", "Плановое количество");

                    b.Property<int?>("PlannedCountHol")
                        .HasColumnName("PLANNED_COUNT_HOL_")
                        .HasAnnotation("Description", "Плановое количество в выходные");

                    b.Property<int?>("Race1Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE1_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Плановое количество рейсов ТС по типу");

                    b.Property<int?>("Race1PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE1_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Плановое количество рейсов ТС по типу");

                    b.Property<int?>("Race2Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE2_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race2PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE2_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race3Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE3_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race3PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE3_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race4Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE4_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race4PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE4_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("RaceCount")
                        .HasColumnName("RACE_COUNT_")
                        .HasAnnotation("Description", "Количество рейсов в выходные");

                    b.Property<int?>("RaceCountHol")
                        .HasColumnName("RACE_COUNT_HOL_")
                        .HasAnnotation("Description", "Количество рейсов в выходные");

                    b.Property<int?>("Rid")
                        .HasColumnName("RID_")
                        .HasAnnotation("Description", "Маршрут");

                    b.Property<int?>("RouteId");

                    b.Property<int?>("Type1Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE1_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Плановое количество ТС по типу");

                    b.Property<int?>("Type1PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE1_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Плановое количество ТС по типу в выходные");

                    b.Property<int?>("Type2Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE2_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Type2PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE2_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Type3Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE3_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Type3PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE3_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Type4Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE4_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Type4PlannedHol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TYPE4_PLANNED_HOL_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.HasKey("Ids")
                        .HasName("PK_DEFAULT_PLANS");

                    b.HasIndex("Ids")
                        .HasName("PK_DEFAULT_PLANS");

                    b.HasIndex("Pid")
                        .IsUnique()
                        .HasName("FK_DEFAULT_PLANS_1");

                    b.HasIndex("Rid")
                        .IsUnique()
                        .HasName("FK_DEFAULT_PLANS_2");

                    b.HasIndex("RouteId");

                    b.ToTable("DEFAULT_PLANS                  ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TimeStamp");

                    b.HasIndex("UserId");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.EventLogField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventLogId");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("NewFieldValue")
                        .HasMaxLength(150);

                    b.Property<string>("OldFieldValue")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("EventLogId");

                    b.ToTable("EventLogField");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Granit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<int?>("BlockNumber")
                        .HasColumnName("BLOCK_NUMBER")
                        .HasAnnotation("Description", "Номер блока");

                    b.Property<int?>("BlockTypeId")
                        .HasColumnName("BLOCK_TYPE")
                        .HasAnnotation("Description", "Тип блока");

                    b.Property<decimal>("ObjectId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints()))
                        .HasColumnName("OIDS_")
                        .HasAnnotation("Description", "ID автобуса");

                    b.HasKey("Id");

                    b.HasIndex("BlockNumber")
                        .HasName("UNQ1_BLOCK_NUM");

                    b.HasIndex("BlockTypeId")
                        .IsUnique()
                        .HasName("FK_GRANITS_2");

                    b.HasIndex("Id")
                        .HasName("PK_GRANITS");

                    b.HasIndex("ObjectId")
                        .IsUnique()
                        .HasName("GRANITS_IDX1");

                    b.ToTable("GRANITS                        ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.IbeTodo", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("ItemCaption")
                        .IsRequired()
                        .HasColumnName("ITEM_CAPTION")
                        .HasMaxLength(255);

                    b.Property<string>("ItemCategory")
                        .HasColumnName("ITEM_CATEGORY")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ItemDeadline")
                        .HasColumnName("ITEM_DEADLINE")
                        .HasColumnType("DATE");

                    b.Property<string>("ItemDescription")
                        .HasColumnName("ITEM_DESCRIPTION")
                        .HasColumnType("BLOB SUB_TYPE TEXT");

                    b.Property<string>("ItemOwner")
                        .IsRequired()
                        .HasColumnName("ITEM_OWNER")
                        .HasMaxLength(64);

                    b.Property<short>("ItemPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITEM_PRIORITY")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<short>("ItemState")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ITEM_STATE")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<DateTime>("ItemTimestamp")
                        .HasColumnName("ITEM_TIMESTAMP");

                    b.Property<string>("ObjectName")
                        .HasColumnName("OBJECT_NAME")
                        .HasMaxLength(64);

                    b.Property<int?>("ObjectType")
                        .HasColumnName("OBJECT_TYPE");

                    b.Property<string>("ResponsiblePerson")
                        .HasColumnName("RESPONSIBLE_PERSON")
                        .HasMaxLength(64);

                    b.HasKey("ItemId")
                        .HasName("RDB$PRIMARY1");

                    b.HasIndex("ItemId")
                        .HasName("RDB$PRIMARY1");

                    b.HasIndex("ObjectName")
                        .IsUnique()
                        .HasName("IBE$TODO_BY_OBJECTNAME");

                    b.ToTable("IBE$TODO                       ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Objects", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints()))
                        .HasColumnName("IDS_")
                        .HasColumnType("NUMERIC(9, 0)");

                    b.Property<int?>("Azmth")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AZMTH_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("CarBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CAR_BRAND_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Марка");

                    b.Property<int?>("CarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VEHICLE_TYPE_")
                        .HasDefaultValueSql("DEFAULT 1")
                        .HasAnnotation("Description", "Тип автобуса");

                    b.Property<DateTime?>("DateInserted")
                        .HasColumnName("DATE_INSERTED_")
                        .HasAnnotation("Description", "Дата ввода");

                    b.Property<int?>("DispRoute")
                        .HasColumnName("DISP_ROUTE_")
                        .HasAnnotation("Description", "Транслятор");

                    b.Property<short?>("LastAddInfo")
                        .HasColumnName("LAST_ADD_INFO_");

                    b.Property<double?>("LastLat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LAST_LAT_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Долгота");

                    b.Property<double?>("LastLon")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LAST_LON_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Широта");

                    b.Property<int?>("LastRout")
                        .HasColumnName("LAST_ROUT_")
                        .HasAnnotation("Description", "Последний маршрут");

                    b.Property<short?>("LastSpeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LAST_SPEED_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Последняя скорость");

                    b.Property<short?>("LastStation")
                        .HasColumnName("LAST_STATION_")
                        .HasAnnotation("Description", "Последняя остановка");

                    b.Property<DateTime?>("LastStationTime")
                        .HasColumnName("LAST_STATION_TIME_")
                        .HasAnnotation("Description", "Время последней остановки");

                    b.Property<DateTime?>("LastTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LAST_TIME_")
                        .HasDefaultValueSql("default CURRENT_TIMESTAMP")
                        .HasAnnotation("Description", "Время последнего отклика");

                    b.Property<short?>("Lowfloor")
                        .HasColumnName("LOWFLOOR");

                    b.Property<string>("Name")
                        .HasColumnName("NAME_")
                        .HasMaxLength(20)
                        .HasAnnotation("Description", "Гос.номер");

                    b.Property<short>("ObjId")
                        .HasColumnName("OBJ_ID_")
                        .HasAnnotation("Description", "Объект");

                    b.Property<int>("ObjOutput")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OBJ_OUTPUT_")
                        .HasDefaultValueSql("DEFAULT 1")
                        .HasAnnotation("Description", "Статус вывода");

                    b.Property<DateTime?>("ObjOutputDate")
                        .HasColumnName("OBJ_OUTPUT_DATE_")
                        .HasAnnotation("Description", "Время вывода");

                    b.Property<long>("Phone")
                        .HasColumnName("PHONE_")
                        .HasAnnotation("Description", "Телефон");

                    b.Property<int>("ProjId")
                        .HasColumnName("PROJ_ID_")
                        .HasAnnotation("Description", "Перевозчик");

                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROVIDER_")
                        .HasDefaultValueSql("DEFAULT 0")
                        .HasAnnotation("Description", "Установщик");

                    b.Property<string>("UserComment")
                        .HasColumnName("USER_COMMENT_")
                        .HasMaxLength(100);

                    b.Property<int?>("YearRelease")
                        .HasColumnName("YEAR_RELEASE_")
                        .HasAnnotation("Description", "Год выпуска");

                    b.HasKey("Id")
                        .HasName("PK_OBJECTS");

                    b.HasIndex("CarBrandId")
                        .IsUnique()
                        .HasName("FK_OBJECTS_1");

                    b.HasIndex("CarTypeId")
                        .IsUnique()
                        .HasName("FK_OBJECTS_2");

                    b.HasIndex("Id")
                        .HasName("UNQ_IDS");

                    b.HasIndex("LastRout")
                        .IsUnique()
                        .HasName("IDX_LAST_ROUT");

                    b.HasIndex("Name")
                        .HasName("UNQ1_OBJECTS");

                    b.HasIndex("ObjOutput")
                        .IsUnique()
                        .HasName("IDX_OBJ_OUTPUT");

                    b.HasIndex("Phone")
                        .HasName("UNQ_OBJECTS_PHONE");

                    b.HasIndex("ProjId");

                    b.HasIndex("ProviderId")
                        .IsUnique()
                        .HasName("FK_OBJECTS_3");

                    b.HasIndex("ObjId", "ProjId")
                        .HasName("PK_OBJECTS");

                    b.ToTable("OBJECTS                        ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Plans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("DATE_")
                        .HasAnnotation("Description", "Дата, на которую сформированы планы");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnName("DATE_MODIFY")
                        .HasAnnotation("Description", "Время формирования планов");

                    b.Property<int?>("ProjId")
                        .HasColumnName("PROJ_ID_")
                        .HasAnnotation("Description", "Перевозчик");

                    b.Property<int?>("Race1Planned")
                        .HasColumnName("RACE1_PLANNED_")
                        .HasAnnotation("Description", "Плановое количество ТС по типу в выходные");

                    b.Property<int?>("Race2Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE2_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race3Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE3_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("Race4Planned")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RACE4_PLANNED_")
                        .HasDefaultValueSql("DEFAULT 0");

                    b.Property<int?>("RoutId")
                        .HasColumnName("ROUT_ID_")
                        .HasAnnotation("Description", "Маршрут");

                    b.Property<int?>("Type1Planned")
                        .HasColumnName("TYPE1_PLANNED_")
                        .HasAnnotation("Description", "Плановое количество ТС по типу");

                    b.Property<int?>("Type2Planned")
                        .HasColumnName("TYPE2_PLANNED_");

                    b.Property<int?>("Type3Planned")
                        .HasColumnName("TYPE3_PLANNED_");

                    b.Property<int?>("Type4Planned")
                        .HasColumnName("TYPE4_PLANNED_");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_PLANS");

                    b.HasIndex("Date", "ProjId", "RoutId")
                        .IsUnique()
                        .HasName("PLANS_IDX1");

                    b.ToTable("PLANS                          ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.ProjContracts", b =>
                {
                    b.Property<int>("Ids")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDS_");

                    b.Property<string>("Atribut")
                        .HasColumnName("ATRIBUT")
                        .HasMaxLength(220)
                        .HasAnnotation("Description", "Юридическая информация");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnName("DATE_START_")
                        .HasColumnType("DATE")
                        .HasAnnotation("Description", "Дата подписания контракта");

                    b.Property<string>("Number")
                        .HasColumnName("NUMBER_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Номер контракта");

                    b.Property<int?>("ProjId")
                        .HasColumnName("PROJ_ID_")
                        .HasAnnotation("Description", "Перевозчик");

                    b.HasKey("Ids")
                        .HasName("PK_PROJ_CONTRACTS_1");

                    b.HasIndex("Ids")
                        .HasName("PK_PROJ_CONTRACTS_1");

                    b.HasIndex("ProjId")
                        .IsUnique()
                        .HasName("INDX_FK_PROJ_CONTRACTS_1");

                    b.ToTable("PROJ_CONTRACTS                 ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<string>("Director")
                        .HasColumnName("DIRECTOR")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Директор");

                    b.Property<string>("Name")
                        .HasColumnName("NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Перевозчик");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_PROJECTS");

                    b.HasIndex("Name")
                        .HasName("UNQ1_PROJECTS");

                    b.ToTable("PROJECTS                       ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.ProjectRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDS_");

                    b.Property<int>("ProjectId")
                        .HasColumnName("PROJ_ID_")
                        .HasAnnotation("Description", "Маршрут");

                    b.Property<int>("RouteId")
                        .HasColumnName("ROUT_ID_")
                        .HasAnnotation("Description", "Перевозчик");

                    b.HasKey("Id")
                        .HasName("PK_PROJ_ROUTS_1");

                    b.HasIndex("Id")
                        .HasName("PK_PROJ_ROUTS_1");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasName("FK_PROJ_ROUTS_2");

                    b.HasIndex("RouteId")
                        .IsUnique()
                        .HasName("FK_PROJ_ROUTS_1");

                    b.HasIndex("ProjectId", "RouteId")
                        .HasName("UNQ_PROJ_ROUTS_2");

                    b.ToTable("PROJ_ROUTS                     ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Установщик");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_PROVIDERS");

                    b.HasIndex("Name")
                        .HasName("UNQ1_PROVIDERS");

                    b.ToTable("PROVIDERS                      ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Reports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME_")
                        .HasMaxLength(20);

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnName("SQL_")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_REPORTS");

                    b.ToTable("REPORTS                        ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.ReportsControl", b =>
                {
                    b.Property<int>("RcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RC_ID_");

                    b.Property<string>("Comments")
                        .HasColumnName("COMMENTS")
                        .HasMaxLength(30)
                        .HasAnnotation("Description", "Комментарии");

                    b.Property<int>("RepCheck")
                        .HasColumnName("REP_CHECK_")
                        .HasAnnotation("Description", "Статус проверки отчета");

                    b.Property<DateTime?>("RepCheckDate")
                        .HasColumnName("REP_CHECK_DATE_")
                        .HasAnnotation("Description", "Время проверки");

                    b.Property<int?>("RepCheckUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REP_CHECK_USER")
                        .HasDefaultValueSql("DEFAULT 5")
                        .HasAnnotation("Description", "Кто проверил отчет");

                    b.Property<DateTime?>("RepCreateDate")
                        .HasColumnName("REP_CREATE_DATE_")
                        .HasAnnotation("Description", "Время создания");

                    b.Property<int?>("RepCreateUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REP_CREATE_USER")
                        .HasDefaultValueSql("DEFAULT 5")
                        .HasAnnotation("Description", "Кто создал отчет");

                    b.Property<byte[]>("RepDataFr3")
                        .HasColumnName("REP_DATA_FR3_")
                        .HasAnnotation("Description", "Файл отчета");

                    b.Property<int>("RepMail")
                        .HasColumnName("REP_MAIL")
                        .HasAnnotation("Description", "Статус отправки отчета");

                    b.Property<DateTime?>("RepMailDate")
                        .HasColumnName("REP_MAIL_DATE_")
                        .HasAnnotation("Description", "Время отправки");

                    b.Property<string>("RepMailTo")
                        .HasColumnName("REP_MAIL_TO")
                        .HasMaxLength(800)
                        .HasAnnotation("Description", "Список пользователей");

                    b.Property<int?>("RepMailUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("REP_MAIL_USER_")
                        .HasDefaultValueSql("DEFAULT 5")
                        .HasAnnotation("Description", "Кто отправил");

                    b.HasKey("RcId")
                        .HasName("PK_REPORTS_CONTROL");

                    b.HasIndex("RcId")
                        .HasName("PK_REPORTS_CONTROL");

                    b.ToTable("REPORTS_CONTROL                ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Маршрут");

                    b.Property<int>("RouteActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ROUTE_ACTIVE_")
                        .HasDefaultValueSql("DEFAULT 1")
                        .HasAnnotation("Description", "Статус активности маршрута");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_ROUTS");

                    b.ToTable("ROUTS                          ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Sim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Associated")
                        .HasColumnName("ASSOCIATED")
                        .HasMaxLength(20);

                    b.Property<string>("Comment")
                        .HasColumnName("COMMENT")
                        .HasMaxLength(200)
                        .HasAnnotation("Description", "Комментарий");

                    b.Property<long>("Phone")
                        .HasColumnName("PHONE")
                        .HasAnnotation("Description", "Телефон");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("DEFAULT 1")
                        .HasAnnotation("Description", "0 : на маршруте; 1 : у нас; 2 : неизвестно; 3 : камеры; 4 : на блок");

                    b.HasKey("Id");

                    b.HasIndex("Associated")
                        .HasName("UNQ_SIM_ASSOCIATED");

                    b.HasIndex("Id")
                        .HasName("PK_SIM");

                    b.HasIndex("Phone")
                        .HasName("UNQ_SIM_PHONE");

                    b.ToTable("SIM                            ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.UserProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<int>("ProjectId")
                        .HasColumnName("PROJ_ID_")
                        .HasAnnotation("Description", "Перевозчик");

                    b.Property<int>("UserId")
                        .HasColumnName("USER_")
                        .HasAnnotation("Description", "Пользователь");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_USERS_PROJS");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasName("FK_USERS_PROJS");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("FK_USERS_PROJS2");

                    b.ToTable("USERS_PROJS                    ");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.WebMapUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_");

                    b.Property<string>("FactAddrLat")
                        .HasColumnName("FACT_ADDR_LAT")
                        .HasMaxLength(25)
                        .HasAnnotation("Description", "Для карты - маркер баз коммунальщиков");

                    b.Property<string>("FactAddrLon")
                        .HasColumnName("FACT_ADDR_LON")
                        .HasMaxLength(25)
                        .HasAnnotation("Description", "Для карты - маркер баз коммунальщиков");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Логин");

                    b.Property<string>("Pass")
                        .HasColumnName("PASS_")
                        .HasMaxLength(50)
                        .HasAnnotation("Description", "Пароль");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("PK_USERS");

                    b.ToTable("USERS                          ");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PTMS.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PTMS.Domain.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PTMS.Domain.Entities.BusStationRoute", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.Route")
                        .WithMany("BusStationRoutes")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.CarBrand", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.DefaultPlans", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("PTMS.Domain.Entities.EventLog", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PTMS.Domain.Entities.EventLogField", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.EventLog", "EventLog")
                        .WithMany("EventLogFields")
                        .HasForeignKey("EventLogId")
                        .HasConstraintName("FK_EventLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Granit", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.BlockType", "BlockType")
                        .WithMany()
                        .HasForeignKey("BlockTypeId");

                    b.HasOne("PTMS.Domain.Entities.Objects", "Object")
                        .WithOne("Block")
                        .HasForeignKey("PTMS.Domain.Entities.Granit", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PTMS.Domain.Entities.Objects", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.CarBrand", "CarBrand")
                        .WithMany("Objects")
                        .HasForeignKey("CarBrandId");

                    b.HasOne("PTMS.Domain.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("LastRout");

                    b.HasOne("PTMS.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PTMS.Domain.Entities.Provider", "Provider")
                        .WithMany("Objects")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PTMS.Domain.Entities.ProjectRoute", b =>
                {
                    b.HasOne("PTMS.Domain.Entities.Project", "Project")
                        .WithMany("ProjectRoutes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PTMS.Domain.Entities.Route", "Route")
                        .WithMany("ProjectRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
